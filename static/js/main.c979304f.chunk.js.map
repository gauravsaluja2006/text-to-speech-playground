{"version":3,"sources":["components/voices-listing.component.tsx","screens/playground.screen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["speechSynthesis","getVoices","forEach","voice","console","log","name","default","VoicesListingComponent","state","voices","textToSpeak","selectedVoiceIndex","selectedVoice","volume","isIntervalRunning","rate","pitch","intervalId","onVolumeSliderChange","val","setState","onRateSliderChange","onPitchSliderChange","onKeepPlayingChanged","e","target","checked","setInterval","speak","clearInterval","Promise","resolve","synth","window","id","length","then","index","this","msg","SpeechSynthesisUtterance","text","Stack","horizontal","Item","grow","TextField","label","value","onChange","PrimaryButton","onClick","allowDisabledFocus","Checkbox","Slider","min","max","step","showValue","className","map","key","setSelectedVoice","Component","PlaygroundScreen","App","Boolean","location","hostname","match","initializeIcons","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c979304f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./voice-listing.component.scss\";\nimport {\n  Stack,\n  TextField,\n  PrimaryButton,\n  Checkbox,\n  Slider,\n} from \"office-ui-fabric-react\";\n\nspeechSynthesis.getVoices().forEach(function (voice) {\n  console.log(voice.name, voice.default ? voice.default : \"\");\n});\n\nexport class VoicesListingComponent extends Component {\n  state = {\n    voices: [],\n    textToSpeak: \"that was really good\",\n    selectedVoiceIndex: 0,\n    selectedVoice: null,\n    volume: 1,\n    isIntervalRunning: false,\n    rate: 1,\n    pitch: 1,\n    intervalId: 0,\n  };\n\n  componentDidMount() {\n    getVoicesPromise().then((voices: any) => {\n      this.setState({ voices, selectedVoice: voices[0] });\n    });\n  }\n\n  setSelectedVoice(voice: any, index: number) {\n    this.setState({\n      selectedVoice: voice,\n      selectedVoiceIndex: index,\n    });\n    if(!this.state.isIntervalRunning) {\n        this.speak();\n    }\n  }\n\n  speak() {\n    var msg = new SpeechSynthesisUtterance();\n    msg.text = this.state.textToSpeak;\n    msg.voice = this.state.voices[this.state.selectedVoiceIndex];\n    msg.volume = this.state.volume; // From 0 to 1\n    msg.rate = this.state.rate; // From 0.1 to 10\n    msg.pitch = this.state.pitch; // From 0 to 2\n    window.speechSynthesis.speak(msg);\n  }\n\n  onVolumeSliderChange = (val: any) => {\n    this.setState({\n      volume: val,\n    });\n  };\n\n  onRateSliderChange = (val: any) => {\n    this.setState({\n      rate: val,\n    });\n  };\n\n  onPitchSliderChange = (val: any) => {\n    this.setState({\n      pitch: val,\n    });\n  };\n\n  onKeepPlayingChanged = (e: any) => {\n    if (e.target.checked) {\n      let intervalId = setInterval(() => {\n        this.speak();\n      }, 3000);\n      this.setState({\n        intervalId,\n        isIntervalRunning: true\n      });\n    } else {\n      clearInterval(this.state.intervalId);\n      this.setState({\n        isIntervalRunning: false\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Stack horizontal>\n        <Stack.Item grow={1}>\n          <div id=\"PlaygroundScreen\">\n            <TextField\n              label=\"Enter your text here\"\n              value={this.state.textToSpeak}\n              onChange={(e) =>\n                this.setState({\n                  textToSpeak: (e.target as HTMLInputElement).value,\n                })\n              }\n            />\n            <br />\n            <PrimaryButton\n              text=\"Speak\"\n              onClick={() => this.speak()}\n              allowDisabledFocus\n            />\n            <br />\n            <br />\n            <Checkbox\n              label=\"Keep playing\"\n              onChange={this.onKeepPlayingChanged}\n            />\n\n            <br />\n            <br />\n\n            <Slider\n              label=\"Volume\"\n              min={0}\n              max={1}\n              step={0.1}\n              showValue\n              value={this.state.volume}\n              onChange={this.onVolumeSliderChange}\n            />\n\n            <br />\n\n            <Slider\n              label=\"Rate\"\n              min={0.1}\n              max={3}\n              step={0.1}\n              showValue\n              value={this.state.rate}\n              onChange={this.onRateSliderChange}\n            />\n\n            <br />\n\n            <Slider\n              label=\"Pitch\"\n              min={0}\n              max={2}\n              step={0.1}\n              showValue\n              value={this.state.pitch}\n              onChange={this.onPitchSliderChange}\n            />\n          </div>\n        </Stack.Item>\n        <Stack.Item grow={1} className=\"synth-voices\">\n          {this.state.voices.map((voice: any, index: number) => (\n            <div\n              className={\n                this.state.selectedVoiceIndex === index\n                  ? \"synth-voice selected\"\n                  : \"synth-voice\"\n              }\n              key={voice.name}\n            >\n              <div\n                onClick={() => {\n                  this.setSelectedVoice(voice, index);\n                }}\n              >\n                {(voice as any).name}\n                {this.state.selectedVoiceIndex === index && (\n                  <span className=\"checkmark\"> âœ”</span>\n                )}\n              </div>\n            </div>\n          ))}\n        </Stack.Item>\n      </Stack>\n    );\n  }\n}\n\nfunction getVoicesPromise() {\n  return new Promise(function (resolve) {\n    const synth = window.speechSynthesis;\n    const id = setInterval(() => {\n      if (synth.getVoices().length !== 0) {\n        resolve(synth.getVoices());\n        clearInterval(id);\n      }\n    }, 10);\n  });\n}\n","import React from \"react\";\n\nimport \"./playground.screen.scss\";\nimport { VoicesListingComponent } from \"../components/voices-listing.component\";\n\nexport const PlaygroundScreen = () => {\n  return <VoicesListingComponent></VoicesListingComponent>;\n};\n","import React from 'react';\nimport { PlaygroundScreen } from './screens/playground.screen';\n\nfunction App() {\n  return (\n    <PlaygroundScreen></PlaygroundScreen>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { initializeIcons } from \"@uifabric/icons\";\ninitializeIcons();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}